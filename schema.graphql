# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  createUser(data: usersCreateInput!): users!
}

type PostsCountAggregate {
  _all: Int!
  created_at: Int!
  description: Int!
  id: Int!
  media: Int!
  profile_id: Int!
  title: Int!
  updated_at: Int!
}

type PostsMaxAggregate {
  created_at: DateTime
  description: String
  id: String
  profile_id: String
  title: String
  updated_at: DateTime
}

type PostsMinAggregate {
  created_at: DateTime
  description: String
  id: String
  profile_id: String
  title: String
  updated_at: DateTime
}

type ProfilesCount {
  posts: Int!
}

type ProfilesCountAggregate {
  _all: Int!
  created_at: Int!
  id: Int!
  type: Int!
  updated_at: Int!
  user_id: Int!
}

type ProfilesMaxAggregate {
  created_at: DateTime
  id: String
  type: profile_type
  updated_at: DateTime
  user_id: String
}

type ProfilesMinAggregate {
  created_at: DateTime
  id: String
  type: profile_type
  updated_at: DateTime
  user_id: String
}

type Query {
  getAllUsers: [users!]!
  login: String!
}

type UsersCount {
  profiles: Int!
}

type UsersCountAggregate {
  _all: Int!
  created_at: Int!
  email: Int!
  id: Int!
  password: Int!
  permissions: Int!
  updated_at: Int!
  username: Int!
}

type UsersMaxAggregate {
  created_at: DateTime
  email: String
  id: String
  password: String
  updated_at: DateTime
  username: String
}

type UsersMinAggregate {
  created_at: DateTime
  email: String
  id: String
  password: String
  updated_at: DateTime
  username: String
}

enum permission {
  CREATE_USER
  MODIFY_USER
}

type posts {
  created_at: DateTime!
  description: String!
  id: ID!
  media: [String!]
  profile_id: String!
  profiles: profiles!
  title: String!
  updated_at: DateTime!
}

input postsCreateManyProfilesInput {
  created_at: DateTime
  description: String!
  id: String
  media: postsCreatemediaInput
  title: String!
  updated_at: DateTime
}

input postsCreateManyProfilesInputEnvelope {
  data: [postsCreateManyProfilesInput!]!
  skipDuplicates: Boolean
}

input postsCreateNestedManyWithoutProfilesInput {
  connect: [postsWhereUniqueInput!]
  connectOrCreate: [postsCreateOrConnectWithoutProfilesInput!]
  create: [postsCreateWithoutProfilesInput!]
  createMany: postsCreateManyProfilesInputEnvelope
}

input postsCreateOrConnectWithoutProfilesInput {
  create: postsCreateWithoutProfilesInput!
  where: postsWhereUniqueInput!
}

input postsCreateWithoutProfilesInput {
  created_at: DateTime
  description: String!
  id: String
  media: postsCreatemediaInput
  title: String!
  updated_at: DateTime
}

input postsCreatemediaInput {
  set: [String!]!
}

input postsWhereUniqueInput {
  id: String
}

enum profile_type {
  LANDLORD
  TENANT
}

type profiles {
  _count: ProfilesCount!
  created_at: DateTime!
  id: ID!
  posts: [posts!]
  type: profile_type!
  updated_at: DateTime!
  user_id: String!
  users: users!
}

input profilesCreateManyUsersInput {
  created_at: DateTime
  id: String
  type: profile_type!
  updated_at: DateTime
}

input profilesCreateManyUsersInputEnvelope {
  data: [profilesCreateManyUsersInput!]!
  skipDuplicates: Boolean
}

input profilesCreateNestedManyWithoutUsersInput {
  connect: [profilesWhereUniqueInput!]
  connectOrCreate: [profilesCreateOrConnectWithoutUsersInput!]
  create: [profilesCreateWithoutUsersInput!]
  createMany: profilesCreateManyUsersInputEnvelope
}

input profilesCreateOrConnectWithoutUsersInput {
  create: profilesCreateWithoutUsersInput!
  where: profilesWhereUniqueInput!
}

input profilesCreateWithoutUsersInput {
  created_at: DateTime
  id: String
  posts: postsCreateNestedManyWithoutProfilesInput
  type: profile_type!
  updated_at: DateTime
}

input profilesUser_idTypeCompoundUniqueInput {
  type: profile_type!
  user_id: String!
}

input profilesWhereUniqueInput {
  id: String
  user_id_type: profilesUser_idTypeCompoundUniqueInput
}

type users {
  _count: UsersCount!
  created_at: DateTime!
  email: String!
  id: ID!
  password: String!
  permissions: [permission!]
  profiles: [profiles!]
  updated_at: DateTime!
  username: String!
}

input usersCreateInput {
  created_at: DateTime
  email: String!
  id: String
  password: String!
  permissions: usersCreatepermissionsInput
  profiles: profilesCreateNestedManyWithoutUsersInput
  updated_at: DateTime
  username: String!
}

input usersCreatepermissionsInput {
  set: [permission!]!
}